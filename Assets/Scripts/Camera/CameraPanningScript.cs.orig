using UnityEngine;
using System.Collections;
//z value of stuff is at 0 camera is at -10


/*TODO
 * 
 * Add google style zooming
 *
 *
 *
 *
 * Add flinging
 * 
 * 
 * Make the beanstalks elasticy and fun
 *
 */

public class CameraPanningScript : MonoBehaviour {
	private static bool enableControls = true;
	public static bool enablePan=true;
	public static bool enableZoom=true;

	public Vector3 velocity = new Vector3 (0f, 0f, 0f);
	public float drag = 30f;
	public static Vector2 lowBoundaries = new Vector2(-100f,0f);
	public static Vector2 highBoundaries = new Vector2(100f,100f);
<<<<<<< HEAD
	private float edgeAcceleration=100f;
=======
	public static float minDepth = -100f;
	private float edgeAcceleration=50f;
>>>>>>> 0bb185b601ff8e221bf1c4a1dd8ecf0cc2d390be
	
	public float zoomVelocity = 0f;
	public float zoomDrag = 20f;
	public float zoomLowLimit=5f;
	private float zoomHighLimit=25f;
	private float zoomAcceleration=100f;
	private float pinchDistance=0f;
	private int prevTouchCount=0;
	

	
	
	public static void EnableControls () {
		enableControls = true;
	}
	
	public static void DisableControls () {
		enableControls = false;
	}

	// Use this for initialization
	void Start () {
	
	}
	
	// Update is called once per frame
	void Update () {
		if (!enableControls) {
			return;
		}
		UpdatePan ();
		UpdateZoom ();
	}

	bool IsCameraOutOfBounds(){
		return (gameObject.transform.position.x>highBoundaries.x||gameObject.transform.position.x<lowBoundaries.x||gameObject.transform.position.y>highBoundaries.y||gameObject.transform.position.y<lowBoundaries.y);
	}

	bool IsCameraZoomOutOfBounds(){
		return (Camera.main.orthographicSize < zoomLowLimit || Camera.main.orthographicSize > zoomHighLimit);
	}

	void UpdatePan(){
		if (!enablePan) {
			return;
		}
		if (IsCameraOutOfBounds ()) {


			if (gameObject.transform.position.x > highBoundaries.x) {
				//gameObject.transform.position=new Vector3((gameObject.transform.position.x+highBoundaries.x)/2f,gameObject.transform.position.y,gameObject.transform.position.z);
				velocity-=Vector3.right*edgeAcceleration*Time.deltaTime*(gameObject.transform.position.x-highBoundaries.x);
			}
			if (gameObject.transform.position.x < lowBoundaries.x) {
				//gameObject.transform.position=new Vector3((gameObject.transform.position.x+lowBoundaries.x)/2f,gameObject.transform.position.y,gameObject.transform.position.z);
				velocity-=Vector3.right*edgeAcceleration*Time.deltaTime*(gameObject.transform.position.x-lowBoundaries.x);
			}
			if (gameObject.transform.position.y > highBoundaries.y) {
				//gameObject.transform.position=new Vector3(gameObject.transform.position.x,(gameObject.transform.position.y+highBoundaries.y)/2f,gameObject.transform.position.z);
				velocity-=Vector3.up*edgeAcceleration*Time.deltaTime*(gameObject.transform.position.y-highBoundaries.y);
			}
			if (gameObject.transform.position.y < lowBoundaries.y) {
				//gameObject.transform.position=new Vector3(gameObject.transform.position.x,(gameObject.transform.position.y+lowBoundaries.y)/2f,gameObject.transform.position.z);
				velocity-=Vector3.up*edgeAcceleration*Time.deltaTime*(gameObject.transform.position.y-lowBoundaries.y);
			}
			gameObject.transform.position=gameObject.transform.position+Time.deltaTime*velocity;
			velocity=Mathf.Pow (1/(drag+1),Time.deltaTime)*velocity;


			return;
		}

		
		if (Input.GetKeyDown (KeyCode.D)) {
			gameObject.transform.position=gameObject.transform.position+new Vector3(.01f,0f,0f);
		}
		if (Input.GetKey (KeyCode.Mouse0)&&!Input.GetKeyDown(KeyCode.Mouse0)&&Input.touchCount<=1&&prevTouchCount<=1) {//TODO make this also happen during a touch/drag
			var moveX = -.0438f*Camera.main.orthographicSize*Input.GetAxisRaw ("Mouse X");
			var moveY = -.0438f*Camera.main.orthographicSize*Input.GetAxisRaw ("Mouse Y");
			velocity=(5*velocity+new Vector3(moveX/Time.deltaTime, moveY/Time.deltaTime, 0f))/6;
			gameObject.transform.position=gameObject.transform.position+new Vector3(moveX,moveY,0f);
			//move the camera to keep the point under the cursor/finger
			//this is orthographic so in theory any translation in pixels of the cursor should cause the same
			//if that doesn't work I can project throught the mouse cursor 
			//make the velocity a weighted average with the delta
		} else {
			gameObject.transform.position=gameObject.transform.position+Time.deltaTime*velocity;
			velocity=Mathf.Pow (1/(drag+1),Time.deltaTime)*velocity;
		}
	}

	void UpdateZoom(){
		if (!enableZoom) {
			return;
		}

		if (IsCameraZoomOutOfBounds()) {
			if(Camera.main.orthographicSize>zoomHighLimit){
				zoomVelocity-=(Camera.main.orthographicSize-zoomHighLimit)*Time.deltaTime*zoomAcceleration;
			}
			if(Camera.main.orthographicSize<zoomLowLimit){
				zoomVelocity-=(Camera.main.orthographicSize-zoomLowLimit)*Time.deltaTime*zoomAcceleration;
			}


			Camera.main.orthographicSize += Time.deltaTime * zoomVelocity;
			zoomVelocity = Mathf.Pow (1 / (zoomDrag + 1), Time.deltaTime) * zoomVelocity;
			return;
		}

		//keyboard
		if(Input.GetKey (KeyCode.Plus)||Input.GetKey (KeyCode.KeypadPlus)||Input.GetKey (KeyCode.Equals)){

			zoomVelocity-=.1f*Camera.main.orthographicSize;
		}
		if(Input.GetKey (KeyCode.Minus)||Input.GetKey (KeyCode.KeypadMinus)){
			zoomVelocity+=.1f*Camera.main.orthographicSize;
		}

		//mouse
		zoomVelocity += -50*Input.GetAxisRaw ("Mouse ScrollWheel");

		//touch
		if (prevTouchCount==1||prevTouchCount==0&&Input.touchCount>=2) {
			pinchDistance=(Input.GetTouch (0).position-Input.GetTouch (1).position).magnitude;
		}
		if (Input.touchCount >= 2) {
			float deltaDistance= (Input.GetTouch (0).position-Input.GetTouch (1).position).magnitude-pinchDistance;
			pinchDistance+=deltaDistance;
			zoomVelocity-=.01f*Camera.main.orthographicSize*deltaDistance;
		}
		prevTouchCount = Input.touchCount;

		Camera.main.orthographicSize += Time.deltaTime * zoomVelocity;
		zoomVelocity = Mathf.Pow (1 / (zoomDrag + 1), Time.deltaTime) * zoomVelocity;
	}
}
